{
  "root": true,
  "parserOptions": {
    "ecmaVersion": 2020,
    "sourceType": "module",
    "parser": "@typescript-eslint/parser",
    "ecmaFeatures": {
      "jsx": true
    },
    "project": "./tsconfig.json",
    "tsconfigRootDir": "./"
  },
  "env": {
    "browser": true,
    "node": true,
    "es2020": true,
    "jest": true
  },
  "plugins": [
    "import",
    "react",
    "@typescript-eslint"
  ],
  "settings": {
    "import/resolver": {
      "alias": {
        "map": [
          ["src", "./src"],
          ["assets", "./src/client/assets"]
        ],
        "extensions": [
          ".js",
          ".jsx",
          ".ts",
          ".tsx"
        ]
      }
    },
    "react": {
      "version": "detect"
    }
  },
  "extends": [
    "standard",
    "eslint:recommended",
    "plugin:import/errors",
    "plugin:import/warnings",
    "plugin:import/typescript",
    "plugin:react/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/eslint-recommended"
  ],
  "rules": {
    "semi": [
      "error",
      "always"
    ],
    "eqeqeq": "error",
    "indent": [
      "error",
      2,
      {
        "SwitchCase": 1,
        "VariableDeclarator": "first"
      }
    ],
    "multiline-ternary": [
      "warn",
      "always-multiline"
    ],
    "comma-dangle": [
      "error",
      {
        "arrays": "always-multiline",
        "objects": "always-multiline",
        "imports": "always-multiline",
        "exports": "always-multiline",
        "functions": "always-multiline"
      }
    ],
    "quotes": [
      "error",
      "single",
      {
        "avoidEscape": true,
        "allowTemplateLiterals": true
      }
    ],
    "jsx-quotes": [
      "error",
      "prefer-double"
    ],
    "object-curly-spacing": [
      "warn",
      "always",
      {
        "objectsInObjects": false,
        "arraysInObjects": false
      }
    ],
    "space-before-function-paren": [
      "warn",
      {
        "anonymous": "always",
        "named": "never",
        "asyncArrow": "always"
      }
    ],
    "keyword-spacing": [
      "error",
      {
        "before": true,
        "after": true,
        "overrides": {
          "if": {
            "after": false
          },
          "switch": {
            "after": false
          },
          "for": {
            "after": false
          },
          "while": {
            "after": false
          },
          "catch": {
            "after": false
          }
        }
      }
    ],
    "space-before-blocks": [
      "error"
    ],
    "linebreak-style": [
      "error",
      "unix"
    ],
    "init-declarations":
    [
      "error",
      "always"
    ],
    "no-undef-init" : [
      "off"
    ],
    "camelcase": [
      "warn"
    ],
    "eol-last": [
      "error",
      "always"
    ],
    "no-multiple-empty-lines": [
      "error",
      {
        "max": 1,
        "maxEOF": 0,
        "maxBOF": 0
      }
    ],
    "no-multi-spaces": [
      "error",
      {
        "ignoreEOLComments": true,
        "exceptions": {
          "VariableDeclarator": true,
          "Property": true,
          "ImportDeclaration": true
        }
      }
    ],
    "operator-linebreak": [
      "warn",
      "after"
    ],
    "react/no-unescaped-entities" : [
      "off"
    ],
    "react/display-name" : [
      "off"
    ],
    "react/jsx-filename-extension": [
      "warn",
      {
        "extensions": [
          ".js",
          ".jsx",
          ".ts",
          ".tsx"
        ]
      }
    ],
    "react/jsx-no-useless-fragment": [
      "error"
    ],
    "react/jsx-curly-brace-presence": [
      "error",
      {
        "props": "never",
        "children": "ignore"
      }
    ],
    "react/jsx-one-expression-per-line": [
      "error",
      {
        "allow": "none"
      }
    ],
    "react/jsx-indent": [
      "error",
      2,
      {
        "checkAttributes": false,
        "indentLogicalExpressions": true
      }
    ],
    "react/jsx-indent-props": [
      "error",
      2
    ],
    "react/jsx-props-no-multi-spaces": [
      "error"
    ],
    "react/jsx-max-props-per-line": [
      "error",
      {
        "maximum": 1,
        "when": "always"
      }
    ],
    "react/jsx-first-prop-new-line": [
      "error",
      "multiline-multiprop"
    ],
    "react/jsx-no-bind": [
      "error",
      {
        "ignoreRefs": true,
        "allowArrowFunctions": true,
        "allowFunctions": false
      }
    ],
    "react/jsx-wrap-multilines": [
      "error",
      {
        "declaration": "parens-new-line",
        "assignment": "parens-new-line",
        "return": "parens-new-line",
        "arrow": "parens-new-line",
        "condition": false,
        "logical": false,
        "prop": "parens-new-line"
      }
    ],
    "react/jsx-curly-spacing": [
      "error",
      {
        "when": "never",
        "attributes": {
          "allowMultiline": true,
          "children": false
        },
        "spacing": {
          "objectLiterals": "never"
        }
      }
    ],
    "react/jsx-curly-newline": [
      "error",
      {
        "multiline": "require",
        "singleline": "forbid"
      }
    ],
    "react/jsx-tag-spacing": [
      "error",
      {
        "closingSlash": "never",
        "beforeSelfClosing": "always",
        "afterOpening": "never",
        "beforeClosing": "never"
      }
    ],
    "react/jsx-closing-tag-location": [
      "error"
    ],
    "react/self-closing-comp": [
      "error",
      {
        "component": true,
        "html": true
      }
    ],
    "react/jsx-closing-bracket-location": [
      "error",
      "line-aligned"
    ],
    "react/jsx-key": [
      "warn",
      {
        "checkKeyMustBeforeSpread": true
      }
    ],
    "react/prop-types": [
      "off" /* TypeScript will manage props */
    ],
    "@typescript-eslint/strict-boolean-expressions" : [
      "error"
      // {
      //   "allow-null-union": true,
      //   "allow-undefined-union": true,
      //   "allow-string": true,
      //   "allow-enum": true,
      //   "allow-number": true
      // }
    ],
    "@typescript-eslint/no-empty-interface": [
      "error",
      {
        "allowSingleExtends": true
      }
    ],
    "@typescript-eslint/no-inferrable-types": [
      "off",
      {
        "ignoreParameters": true,
        "ignoreProperties": true
      }
    ],
    "@typescript-eslint/restrict-template-expressions": [
      "warn",
      {
        "allowNumber": true,
        "allowBoolean": true,
        "allowAny": false,
        "allowNullish": true
      }
    ],
    "no-use-before-define": [
      "off"
    ],
    "@typescript-eslint/no-use-before-define": [
      "warn"
    ]
  }
}